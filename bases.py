
import streamlit as st
import pandas as pd
import folium
import geopandas as gpd
from matplotlib.colors import rgb2hex
import matplotlib.cm
from streamlit_folium import folium_static
import numpy as np # For checking NaN values more broadly if needed
import plotly.express as px # For charts in SocioScram
import re # For URL analysis in SocioScram
import altair as alt # For Scrambuster 60+ charts
import pydeck as pydeck # For Scrambuster 60+ map
# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Curso: Prevenci√≥n del Ciberfraude y Phishing", layout="wide")

# --- Inyecci√≥n de CSS Personalizado ---
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Lato:wght@400;700&family=Open+Sans:wght@400;700&display=swap');

body {
    font-family: 'Lato', 'Open Sans', sans-serif; /* Nueva fuente para el cuerpo */
    background-color: #98FB98; /* Tono de verde menta */
    color: #263238; /* Color de texto principal m√°s oscuro */
    line-height: 1.6;
}

/* Contenedor principal de la aplicaci√≥n (excluyendo la barra lateral) */
[data-testid="stAppViewContainer"] {
    background-color: rgba(255, 255, 255, 0.8); /* Fondo blanco semi-transparente para el contenido */
    backdrop-filter: blur(5px); /* Efecto de desenfoque para el fondo del contenedor */
    border-radius: 10px; /* Bordes redondeados para el contenedor principal */
    margin: 10px; /* Peque√±o margen alrededor del contenedor principal */
    padding: 20px; /* Padding interno */
}

h1 { /* st.title */
    font-family: 'Montserrat', 'Roboto', sans-serif; /* Nueva fuente para t√≠tulos */
    color: #00796b; /* Verde azulado oscuro para t√≠tulos */
    font-weight: 700;
    border-bottom: 3px solid #004d40; /* Acento verde m√°s oscuro */
    padding-bottom: 0.3em;
    margin-bottom: 0.7em;
}

h2 { /* st.header */
    font-family: 'Montserrat', 'Roboto', sans-serif; /* Nueva fuente para encabezados */
    color: #00897b; /* Verde azulado para encabezados */
    font-weight: 700;
    margin-top: 1.5em;
    margin-bottom: 0.6em;
}

h3 { /* st.subheader */
    font-family: 'Montserrat', 'Roboto', sans-serif; /* Nueva fuente para subencabezados */
    color: #26a69a; /* Verde azulado m√°s claro para subencabezados */
    font-weight: 400;
    margin-top: 1.2em;
    margin-bottom: 0.5em;
}

p, li {
    font-size: 1.05em; /* Ligeramente m√°s grande para mejorar legibilidad */
    color: #37474f; /* Gris azulado oscuro para p√°rrafos y listas */
}

/* Estilo para los contenedores usados como tarjetas en la p√°gina de Inicio */
/* Se dirige a la estructura espec√≠fica creada por st.columns y st.container(border=True) */
div[data-testid="stVerticalBlock"] div[data-testid="stHorizontalBlock"] div[data-testid="stVerticalBlock"] > div[data-testid="stStyledFullScreenFrame"] {
    background-color: #ffffff; /* Fondo blanco para las tarjetas */
    border: 1px solid #dfe6e9; /* Borde suave */
    border-radius: 10px; /* Bordes m√°s redondeados */
    box-shadow: 0 2px 5px rgba(0,0,0,0.08);
    padding: 1.3em !important; /* Aumentar padding, !important si es necesario */
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

div[data-testid="stVerticalBlock"] div[data-testid="stHorizontalBlock"] div[data-testid="stVerticalBlock"] > div[data-testid="stStyledFullScreenFrame"]:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 10px rgba(0,0,0,0.12);
}

/* Estilo para los encabezados de los st.expander */
[data-testid="stExpander"] summary {
    font-size: 1.1em; /* Un poco m√°s grande */
    font-weight: bold;
    background-color: #B4E1FF; /* Azul claro pastel para expanders */
    color: #ffffff; /* Texto blanco */
    border: none;
    border-radius: 8px; /* Bordes m√°s redondeados */
    padding: 0.7em 1.2em;
    margin-bottom: 0.2em; /* Peque√±o espacio antes del contenido */
    transition: background-color 0.2s ease;
}
[data-testid="stExpander"] summary:hover {
    background-color: #ADD8E6; /* Azul claro al pasar el cursor */
}

/* Estilo para el contenido dentro de los st.expander */
[data-testid="stExpander"] [data-testid="stVerticalBlock"] {
    background-color: #e8f5e9; /* Fondo verde muy claro para el contenido del expander */
    padding: 1.2em;
    border: 1px solid #c8e6c9; /* Borde verde sutil */
    border-top: none; /* El summary ya crea una separaci√≥n visual */
    border-radius: 0 0 6px 6px; /* Redondear esquinas inferiores */
}

/* --- Estilos Opcionales para la Barra Lateral --- */
/* [data-testid="stSidebar"] {
    background-color: #2c3e50; 
}
[data-testid="stSidebar"] .st-emotion-cache-16txtl3 { 
    color: #ecf0f1 !important;
    font-size: 1.05em;
}
[data-testid="stSidebar"] .st-emotion-cache-16txtl3:hover {
    color: #ffffff !important;
}
[data-testid="stSidebar"] h1 { 
    color: #ffffff;
    font-size: 1.5em;
    text-align: center;
    border-bottom: none;
    margin-bottom: 1em;
} */

/* Estilo para st.info */
div[data-testid="stInfo"] {
    background-color: #e0f2f1; /* Verde azulado muy claro */
    border-left: 5px solid #00796b; /* Borde izquierdo verde azulado */
    color: #004d40; /* Texto verde azulado oscuro */
    padding: 1em;
    border-radius: 4px;
}

/* Estilo para st.success */
div[data-testid="stSuccess"] {
    background-color: #dcedc8; /* Verde claro */
    border-left: 5px solid #689f38; /* Borde izquierdo verde medio */
    color: #33691e; /* Texto verde oscuro */
    padding: 1em;
    border-radius: 4px;
}

/* Estilo para st.error */
div[data-testid="stError"] {
    background-color: #ffcdd2; /* Rojo muy claro */
    border-left: 5px solid #d32f2f; /* Borde izquierdo rojo */
    color: #b71c1c; /* Texto rojo oscuro */
    padding: 1em;
    border-radius: 4px;
}

/* Estilo para st.warning */
div[data-testid="stWarning"] {
    background-color: #fff9c4; /* Amarillo muy claro */
    border-left: 5px solid #fbc02d; /* Borde izquierdo amarillo */
    color: #f57f17; /* Texto amarillo oscuro/naranja */
    padding: 1em;
    border-radius: 4px;
}

/* Estilo para botones */
button[data-testid="baseButton-secondary"] { /* Bot√≥n por defecto de Streamlit */
    background-color: #00796b; /* Verde azulado para botones */
    color: white;
    border: none;
    border-radius: 5px;
    padding: 0.6em 1.2em;
    font-weight: bold;
    transition: background-color 0.2s ease, transform 0.1s ease;
}
button[data-testid="baseButton-secondary"]:hover {
    background-color: #004d40; /* Verde m√°s oscuro al pasar el cursor */
    transform: translateY(-1px);
}
button[data-testid="baseButton-secondary"]:active {
    transform: translateY(0px);
}

</style>
""", unsafe_allow_html=True)

# --- Funciones para mostrar cada p√°gina/m√≥dulo ---

def display_inicio():
    st.title("üîêCurso: Prevenci√≥n del Ciberfraude y Phishingüîê")
    st.divider()
    st.markdown("""
    üß†Bienvenido al curso interactivo sobre c√≥mo protegerte del ciberfraude y el phishingüß†.

    üìåEn la era digital, los adultos mayores se han convertido en un grupo especialmente vulnerable ante el creciente fen√≥meno del fraude a trav√©s de dispositivos m√≥viles. Este problema no solo representa un desaf√≠o tecnol√≥gico, sino tambi√©n social, psicol√≥gico y √©tico, ya que afecta directamente su seguridad econ√≥mica, su confianza en las herramientas digitales y su bienestar emocional. En muchos casos, esta poblaci√≥n carece de las habilidades necesarias para identificar y evitar estafas en l√≠nea.
    El fraude digital contra la tercera edad no puede abordarse desde una sola perspectiva. Por un lado, existe un componente tecnol√≥gico: los delincuentes aprovechan la falta de familiaridad de los adultos mayores con aplicaciones, mensajes de phishing o enlaces maliciosos. Por otro, hay un factor social: muchos ancianos viven solos o tienen redes de apoyo limitadas, lo que los hace m√°s susceptibles a enga√±os. Adem√°s, el impacto psicol√≥gico es significativo, ya que, tras ser v√≠ctimas de fraude, pueden desarrollar desconfianza hacia la tecnolog√≠a o incluso aislarse por miedo a nuevos ataques.
    """)
    st.divider()
    st.subheader("üîç En este curso aprender√°s a:")

    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container(border=True):
            st.markdown("##### ‚úÖ Reconocer Se√±ales de Alerta")
            st.markdown("En correos, mensajes y sitios web.")
    with col2:
        with st.container(border=True):
            st.markdown("##### ‚ùå Evitar Fraudes Comunes")
            st.markdown("Especialmente en redes sociales.")
    with col3:
        with st.container(border=True):
            st.markdown("##### üîí Proteger tu Informaci√≥n")
            st.markdown("Mant√©n seguros tus datos personales en l√≠nea.")

    st.divider()
    st.markdown("""
   üìã Usa el men√∫ lateral para navegar por los m√≥dulos.
    """)

def display_modulo1():
    st.header("üß©M√≥dulo 1: ¬øQu√© es el Ciberfraude?üë®‚Äçüíª / üë©‚Äçüíª")
    st.markdown("""
    El ciberfraude es un tipo de delito cometido a trav√©s de Internet o medios digitales, donde los ciberdelincuentes utilizan t√©cnicas enga√±osas para obtener beneficios econ√≥micos, robar informaci√≥n personal o financiera, o causar da√±os a las v√≠ctimas.
    """)
    st.divider()
    st.subheader("Modalidades Comunes de Ciberfraude:")
    st.markdown("""
    *   **‚ö†Ô∏è Phishing:** Suplantaci√≥n de identidad de instituciones financieras o empresas para robar datos bancarios mediante correos o mensajes falsos.
    *   **‚ö†Ô∏è Smishing:** Uso de mensajes SMS con enlaces fraudulentos que dirigen a p√°ginas falsas.
    *   **‚ö†Ô∏è Pharming:** Redirecci√≥n a sitios web falsos para capturar informaci√≥n confidencial.
    *   **‚ö†Ô∏è Vishing:** Llamadas telef√≥nicas simulando ser empleados de bancos para obtener datos.
    *   **‚ö†Ô∏è Malware:** Software malicioso (como ransomware) que infecta dispositivos para extorsionar o robar informaci√≥n.
    *   **‚ö†Ô∏è Ofertas enga√±osas:** Promociones falsas en redes sociales o tiendas en l√≠nea que buscan estafar con pagos anticipados.
    """)

def display_modulo2():
    st.header("üß©M√≥dulo 2: ¬øQu√© es el Phishing?")
    st.markdown("""
    üñ•Ô∏èEl phishing es un tipo de ciberfraude que busca enga√±ar a las personas para que revelen informaci√≥n personal, como contrase√±as o datos bancarios. Los atacantes se hacen pasar por entidades de confianza (bancos, empresas, instituciones p√∫blicas) a trav√©s de correos electr√≥nicos, mensajes de texto, llamadas telef√≥nicas o sitios web falsos
    """)
    st.divider()

    st.subheader("üì≤ Caracter√≠sticas del Phishing")
    st.markdown("""
    *   **üìü Suplantaci√≥n de identidad:** Los ciberdelincuentes imitan marcas leg√≠timas (ej. Amazon, PayPal, bancos) usando logos y dise√±os similares para parecer aut√©nticos.
    *   **üë©‚Äçüíª T√°cticas de urgencia o miedo:** Mensajes alarmantes como "¬°Tu cuenta ser√° bloqueada!" o "¬°Act√∫a ahora!" para manipular emocionalmente a la v√≠ctima.
    *   **üåê Enlaces o archivos maliciosos:** Incluyen links a p√°ginas falsas que imitan sitios reales (ej. una copia de la web de BBVA) o adjuntos infectados con malware.
    """)

    st.subheader("üì± Tipos Comunes de Phishing")
    st.markdown("""
    *   **üì§ Phishing masivo:** Correos gen√©ricos enviados a miles de personas, esperando que algunos caigan.
    *   **üë´ Spear phishing:** Ataques personalizados con informaci√≥n espec√≠fica de la v√≠ctima (ej. nombre, cargo laboral).
    *   **üìû Smishing y Vishing:** Usan SMS o llamadas telef√≥nicas para robar datos.
    *   **üì∂ Whaling:** Dirigido a ejecutivos de alto nivel para fraudes financieros.
    *   **üõú Pharming:** Redirige a sitios falsos incluso si la v√≠ctima escribe la URL correcta.
    """)

def display_modulo3():
    st.header("üß©M√≥dulo 3: ¬øPor qu√© los Adultos Mayores son Vulnerables?")
    st.markdown("""
    Los adultos mayores enfrentan una situaci√≥n de vulnerabilidad debido a la convergencia de m√∫ltiples factores que dificultan su adaptaci√≥n a una sociedad en constante evoluci√≥n. Esta vulnerabilidad surge principalmente por barreras tecnol√≥gicas, sociales y psicol√≥gicas, las cuales se interrelacionan y generan exclusi√≥n, dependencia y riesgos para su calidad de vida.
    """)
    st.divider()

    with st.expander("üíª Factores Tecnol√≥gicos", expanded=True):
        st.markdown("""
        La **brecha digital** es uno de los mayores obst√°culos, ya que muchos adultos mayores no tuvieron contacto temprano con tecnolog√≠as modernas como smartphones, computadoras o internet. Esto les dificulta realizar tr√°mites en l√≠nea, acceder a servicios digitales o incluso comunicarse con familiares a trav√©s de plataformas virtuales.
        *   Dificultades de aprendizaje debido a la r√°pida evoluci√≥n tecnol√≥gica.
        *   Falta de acceso econ√≥mico a dispositivos o conexiones estables.
        *   Temor a fraudes digitales (como phishing o estafas), lo que incrementa su marginaci√≥n.
        """)

    with st.expander("ü§ù Factores Sociales"):
        st.markdown("""
        El **aislamiento social** es un problema recurrente, agravado por la jubilaci√≥n, la p√©rdida de pareja o amigos, y la movilidad reducida. Esto limita sus interacciones y puede llevar a soledad cr√≥nica.
        *   Estereotipos sociales que los presentan como incapaces de aprender o participar activamente.
        *   Dependencia econ√≥mica, con pensiones a menudo insuficientes.
        *   Falta de pol√≠ticas p√∫blicas que promuevan su inclusi√≥n.
        """)

    with st.expander("üß† Factores Psicol√≥gicos"):
        st.markdown("""
        La **resistencia al cambio** es com√∫n, pues muchos prefieren m√©todos tradicionales y experimentan ansiedad ante lo nuevo.
        *   El deterioro cognitivo asociado a la edad (como demencia o Alzheimer) puede dificultar la adaptaci√≥n.
        *   Baja autoeficacia (falta de confianza en sus propias habilidades para aprender).
        *   Problemas de salud mental como depresi√≥n o ansiedad, que pueden generar sentimientos de inutilidad.
        """)

def display_modulo4():
    st.header("üß©M√≥dulo 4: Se√±ales de Alerta") # Corregido para consistencia de may√∫sculas
    st.markdown("""
    Los adultos mayores son especialmente vulnerables a los ciberfraudes y phishing debido a factores como la brecha digital, la confianza excesiva y el desconocimiento de las t√°cticas utilizadas por los delincuentes. A continuaci√≥n, se detallan las se√±ales de alerta m√°s comunes y c√≥mo identificarlas para protegerte:
    """)
    st.divider()

    with st.expander("üö© En Correos Electr√≥nicos y Mensajes (SMS/WhatsApp)", expanded=True):
        st.markdown("""
        *   **Remitentes desconocidos o sospechosos:** Si no reconoces la direcci√≥n de correo o el n√∫mero de tel√©fono, desconf√≠a. Presta atenci√≥n a direcciones que intentan imitar a empresas conocidas pero tienen ligeras variaciones (ej. `soporte@banco-confirmacion.com` en lugar de `soporte@banco.com`).
        *   **Asuntos alarmistas o demasiado buenos para ser verdad:** Frases como "¬°Urgente! Su cuenta ha sido bloqueada", "Ha ganado un premio millonario" o "Problema con su env√≠o" buscan generar una reacci√≥n inmediata sin pensar.
        *   **Errores gramaticales y ortogr√°ficos:** Los mensajes fraudulentos suelen contener errores de redacci√≥n, mala puntuaci√≥n o traducciones extra√±as. Las empresas serias cuidan mucho su comunicaci√≥n.
        *   **Solicitud de informaci√≥n personal o financiera:** Ninguna entidad leg√≠tima (bancos, gobierno, etc.) te pedir√° contrase√±as, n√∫meros de tarjeta completos, c√≥digos de seguridad o datos sensibles por correo o mensaje.
        *   **Enlaces o botones sospechosos:** Antes de hacer clic, pasa el cursor sobre el enlace (sin hacer clic) para ver la direcci√≥n web real a la que te dirige. Si parece extra√±a o no coincide con la empresa que dice ser, no hagas clic. En el m√≥vil, mant√©n presionado el enlace para ver la URL.
        *   **Archivos adjuntos inesperados:** No descargues ni abras archivos adjuntos que no esperabas, especialmente si son de remitentes desconocidos o tienen extensiones como `.exe`, `.zip` (si no esperas un comprimido) o `.scr`.
        *   **Saludos gen√©ricos:** Desconf√≠a de correos que comiencen con "Estimado cliente" o "Apreciado usuario" en lugar de tu nombre, especialmente si supuestamente provienen de una entidad con la que tienes una cuenta.
        """)

    with st.expander("üö© En Sitios Web"):
        st.markdown("""
        *   **URL extra√±a o sin "https":** Verifica que la direcci√≥n del sitio web comience con `https://` (la "s" indica seguridad) y que el nombre de dominio sea el correcto. Los sitios fraudulentos pueden tener URLs muy largas, con guiones o n√∫meros extra√±os, o dominios diferentes (ej. `bbva-seguridad.net` en lugar de `bbva.mx`).
        *   **Dise√±o de baja calidad o diferente al habitual:** Si el sitio web se ve poco profesional, con im√°genes de mala calidad, colores distintos o una estructura diferente a la que conoces de esa empresa, podr√≠a ser falso.
        *   **Ventanas emergentes (pop-ups) pidiendo datos:** Desconf√≠a de las ventanas emergentes que te piden informaci√≥n personal o te instan a descargar software.
        *   **Ofertas demasiado buenas para ser verdad:** Precios incre√≠blemente bajos o promociones exageradas pueden ser un gancho para estafarte.
        """)

    with st.expander("üö© En Llamadas Telef√≥nicas (Vishing)"):
        st.markdown("""
        *   **Llamadas inesperadas de supuestos bancos o instituciones:** Si te llaman para "verificar tu cuenta", "confirmar una transacci√≥n sospechosa" o "actualizar tus datos", cuelga.
        *   **Presi√≥n para actuar de inmediato:** Los estafadores intentar√°n que no tengas tiempo de pensar, amenazando con consecuencias graves si no proporcionas la informaci√≥n al instante.
        *   **Solicitud de claves, contrase√±as o c√≥digos de verificaci√≥n:** Nunca compartas esta informaci√≥n por tel√©fono. Tu banco nunca te la pedir√°.
        *   **Petici√≥n de instalar software o dar acceso remoto a tu computadora/m√≥vil:** Esto es una t√°ctica com√∫n para tomar control de tus dispositivos.
        """)

def display_modulo5():
    st.header("üß©M√≥dulo 5: Casos Reales y Estad√≠sticas con Mapa Interactivo")
    st.markdown("""
    Explora las denuncias de manera interactiva en el mapa. Utiliza los filtros para analizar patrones y tendencias en la Ciudad de M√©xico.
    """)
    st.divider()

    # --- Carga de datos ---
    @st.cache_data # Cache data for performance
    def load_data():
        try:
            df_denuncias = pd.read_csv("denuncias_filtrado.csv")
            geojson_path = "limite-de-las-alcaldas(1).json" 
            alcaldias_gdf = gpd.read_file(geojson_path)
            return df_denuncias, alcaldias_gdf
        except FileNotFoundError as e:
            st.error(f"Error al cargar archivos de datos: {e}. Aseg√∫rate de que 'denuncias_filtrado.csv' y 'limite-de-las-alcaldas.json' est√©n en el directorio correcto.")
            return None, None

    df_denuncias, alcaldias_gdf = load_data()

    if df_denuncias is None or alcaldias_gdf is None:
        return # Stop execution if data loading failed

    # Preprocesamiento inicial
    alcaldias_gdf['alcaldia'] = alcaldias_gdf['NOMGEO'].str.upper()
    if 'alcaldia_hecho' in df_denuncias.columns:
        df_denuncias['alcaldia_hecho'] = df_denuncias['alcaldia_hecho'].str.upper()
    else:
        st.warning("La columna 'alcaldia_hecho' no se encuentra en 'denuncias_filtrado.csv'. Algunas funcionalidades del mapa pueden no estar disponibles.")

    # --- Filtros interactivos ---
    st.subheader("Filtros del Mapa")
    
    # Check for necessary columns before creating filters
    available_years = []
    if 'anio_hecho' in df_denuncias.columns and len(df_denuncias['anio_hecho'].dropna().unique()) > 0:
        available_years = sorted(df_denuncias['anio_hecho'].dropna().astype(int).unique())
    
    available_delitos = []
    if 'delito' in df_denuncias.columns and len(df_denuncias['delito'].dropna().unique()) > 0:
        available_delitos = sorted(df_denuncias['delito'].dropna().unique())

    a√±o_selected = st.selectbox("Selecciona el a√±o:", available_years, key="map_year_filter") if available_years else None
    
    col1_filter, col2_filter, col3_filter = st.columns(3)
    with col1_filter:
        delitos_selected = st.multiselect("Selecciona delitos:", available_delitos, default=[], key="map_delitos_filter") if available_delitos else []
    with col2_filter:
        dias_semana = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        dias_selected = st.multiselect("Selecciona d√≠as de la semana:", dias_semana, default=[], key="map_dias_filter") if 'dia_semana' in df_denuncias.columns else []
    with col3_filter:
        franjas_horarias = ['Madrugada', 'Ma√±ana', 'Tarde', 'Noche']
        franjas_selected = st.multiselect("Selecciona franja horaria:", franjas_horarias, default=[], key="map_franjas_filter") if 'franja_horaria' in df_denuncias.columns else []

    # --- Aplicar filtros ---
    df_filtrado = df_denuncias.copy()
    if a√±o_selected and 'anio_hecho' in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado['anio_hecho'] == a√±o_selected]
    if delitos_selected and 'delito' in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado['delito'].isin(delitos_selected)]
    if dias_selected and 'dia_semana' in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado['dia_semana'].isin(dias_selected)]
    if franjas_selected and 'franja_horaria' in df_filtrado.columns:
        df_filtrado = df_filtrado[df_filtrado['franja_horaria'].isin(franjas_selected)]

    # Limpiar coordenadas
    if 'latitud' in df_filtrado.columns and 'longitud' in df_filtrado.columns:
        df_filtrado = df_filtrado.dropna(subset=['latitud', 'longitud'])
    else:
        st.error("Las columnas 'latitud' o 'longitud' no se encuentran en los datos. No se pueden mostrar los marcadores de denuncias.")
        return

    if df_filtrado.empty:
        st.warning("No hay datos para mostrar con los filtros seleccionados.")
        return

    # --- Clasificaci√≥n adulto mayor (simulada) ---
    df_filtrado['grupo_poblacional'] = 'General'
    if 'alcaldia_hecho' in df_filtrado.columns:
        for alcaldia_val in df_filtrado['alcaldia_hecho'].dropna().unique():
            indices = df_filtrado[df_filtrado['alcaldia_hecho'] == alcaldia_val].sample(frac=0.3, random_state=42).index
            df_filtrado.loc[indices, 'grupo_poblacional'] = 'Adulto mayor'

    # --- Mapa base ---
    m = folium.Map(location=[19.4326, -99.1332], zoom_start=10, tiles='CartoDB positron')

    # Agregar denuncias por alcald√≠a (coropleta)
    if 'alcaldia_hecho' in df_filtrado.columns:
        denuncias_por_alcaldia = df_filtrado['alcaldia_hecho'].value_counts().reset_index()
        denuncias_por_alcaldia.columns = ['alcaldia', 'denuncias']
        alcaldias_mapa_data = alcaldias_gdf.merge(denuncias_por_alcaldia, on='alcaldia', how='left')
        alcaldias_mapa_data['denuncias'] = alcaldias_mapa_data['denuncias'].fillna(0)

        unique_alcaldias_map = alcaldias_mapa_data['alcaldia'].dropna().unique()
        if len(unique_alcaldias_map) > 0:
            cmap = matplotlib.cm.get_cmap('viridis', len(unique_alcaldias_map)) # Using viridis colormap
            colors_rgba = [cmap(i) for i in range(len(unique_alcaldias_map))]
            color_dict = {alcaldia: rgb2hex(colors_rgba[i]) for i, alcaldia in enumerate(unique_alcaldias_map)}

            def style_function(feature):
                alcaldia_feat = feature['properties']['alcaldia']
                return {
                    'fillColor': color_dict.get(alcaldia_feat, '#lightgray'), # Default color
                    'color': 'black',
                    'weight': 1,
                    'fillOpacity': 0.7
                }
            folium.GeoJson(
                alcaldias_mapa_data,
                name='Alcald√≠as por n√∫mero de denuncias',
                style_function=style_function,
                tooltip=folium.GeoJsonTooltip(fields=['NOMGEO', 'denuncias'], aliases=['Alcald√≠a:', 'Denuncias:'])
            ).add_to(m)

    # --- Agregar marcadores de denuncias individuales ---
    color_marker = {'Adulto mayor': 'blue', 'General': 'red'}
    if 'grupo_poblacional' in df_filtrado.columns:
        for grupo in df_filtrado['grupo_poblacional'].dropna().unique():
            capa_grupo = folium.FeatureGroup(name=f"Poblaci√≥n: {grupo}")
            df_grupo_data = df_filtrado[df_filtrado['grupo_poblacional'] == grupo]
            for _, row in df_grupo_data.iterrows():
                popup_html = f"<b>Delito:</b> {row.get('delito', 'N/A')}<br><b>Alcald√≠a:</b> {row.get('alcaldia_hecho', 'N/A')}<br><b>Hora:</b> {row.get('hora_hecho', 'N/A')}"
                folium.CircleMarker(
                    location=[row['latitud'], row['longitud']],
                    radius=4, # Slightly larger markers
                    color=color_marker.get(grupo, 'gray'),
                    fill=True,
                    fill_color=color_marker.get(grupo, 'gray'),
                    fill_opacity=0.6,
                    popup=folium.Popup(popup_html, max_width=300)
                ).add_to(capa_grupo)
            capa_grupo.add_to(m)

    # --- Mostrar mapa ---
    folium.LayerControl().add_to(m)
    with st.container(): # Use a container for better layout control if needed
        folium_static(m, width=None, height=600) # Width=None makes it responsive

def display_modulo6():
    st.header("üß©M√≥dulo 6: Buenas Pr√°cticas para Protegerte") # Corregido para consistencia de may√∫sculas
    st.markdown("""
    Adoptar h√°bitos seguros en l√≠nea es tu mejor defensa contra el ciberfraude y el phishing. Aqu√≠ te presentamos algunas pr√°cticas esenciales:
    """)
    st.divider()

    with st.expander("üîë Gesti√≥n de Contrase√±as", expanded=True):
        st.markdown("""
        *   **Usa contrase√±as seguras y √∫nicas:** Combina letras may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos. Evita usar la misma contrase√±a para m√∫ltiples cuentas. Considera un gestor de contrase√±as para ayudarte.
        *   **C√°mbialas peri√≥dicamente:** Especialmente las de tus cuentas m√°s importantes (banco, correo electr√≥nico).
        *   **No las compartas con nadie:** Ni siquiera con amigos o familiares.
        """)

    with st.expander("üõ°Ô∏è Protecci√≥n de Dispositivos y Conexiones"):
        st.markdown("""
        *   **Mant√©n tu software actualizado:** Esto incluye tu sistema operativo (Windows, Android, iOS), navegador web y antivirus. Las actualizaciones suelen corregir fallos de seguridad.
        *   **Usa un antivirus y firewall confiables:** Aseg√∫rate de que est√©n activos y actualizados.
        *   **Desconf√≠a de redes Wi-Fi p√∫blicas:** Evita realizar transacciones bancarias o ingresar informaci√≥n sensible cuando est√©s conectado a redes Wi-Fi abiertas (aeropuertos, cafeter√≠as). Si es necesario, usa una VPN (Red Privada Virtual).
        *   **Cierra sesi√≥n** en tus cuentas cuando termines de usarlas, especialmente en computadoras compartidas.
        """)

    with st.expander("üßê Navegaci√≥n y Comunicaci√≥n Segura"):
        st.markdown("""
        *   **Verifica enlaces antes de hacer clic:** Como aprendiste en el m√≥dulo de se√±ales de alerta, revisa siempre la URL.
        *   **No conf√≠es ciegamente en correos o mensajes:** Aplica el escepticismo. Si algo parece sospechoso, probablemente lo sea.
        *   **Activa la autenticaci√≥n de dos factores (2FA) siempre que sea posible:** Esto a√±ade una capa extra de seguridad, ya que adem√°s de tu contrase√±a, necesitar√°s un segundo c√≥digo (generalmente enviado a tu m√≥vil) para acceder a tu cuenta.
        *   **Nunca compartas informaci√≥n sensible por mensaje, correo o llamada no solicitada:** Los bancos y empresas serias no te pedir√°n datos confidenciales de esta forma.
        *   **Ten cuidado con lo que descargas:** Descarga aplicaciones y archivos solo de fuentes oficiales y confiables.
        *   **Configura la privacidad en tus redes sociales:** Limita qui√©n puede ver tu informaci√≥n personal.
        """)

    with st.expander("üß† Educaci√≥n y Prevenci√≥n Continua"):
        st.markdown("""
        *   **Mantente informado:** Las t√°cticas de los ciberdelincuentes cambian. Inf√≥rmate sobre las nuevas modalidades de fraude.
        *   **Desconf√≠a de ofertas demasiado buenas:** Si algo suena incre√≠ble, probablemente no sea real.
        *   **Pide ayuda si tienes dudas:** Si no est√°s seguro sobre un correo, mensaje o sitio web, pregunta a alguien de confianza o contacta directamente a la entidad involucrada por un canal oficial.
        *   **Reporta los intentos de fraude:** Ayuda a proteger a otros reportando correos de phishing o sitios fraudulentos a las autoridades competentes o a las empresas suplantadas.
        """)

def display_aviso_privacidad():
    st.header("üìú Aviso de Privacidad")
    st.markdown("""
    En **Scrambuster 60+**, la privacidad de tus datos es fundamental. A continuaci√≥n, te explicamos c√≥mo manejamos la informaci√≥n que pudieras proporcionarnos:
    """)
    with st.container(border=True):
        st.markdown("""
    
Scrambuster 60+ informa que los datos personales recabados a trav√©s de esta plataforma se utilizan √∫nicamente con fines acad√©micos, de investigaci√≥n y concientizaci√≥n social sobre la prevenci√≥n del fraude digital en personas adultas mayores.

Nuestro proyecto no tiene fines de lucro, no comercializa los datos personales y no los comparte con terceros sin consentimiento previo y expl√≠cito.

El tratamiento de los datos se rige bajo los principios establecidos en la LFPDPPP, en particular:

Art√≠culo 1¬∞: Objeto de la Ley (proteger los datos personales en posesi√≥n de particulares).

Art√≠culo 3¬∞ (Principios): Licitud, consentimiento, informaci√≥n, calidad, finalidad, lealtad, proporcionalidad y responsabilidad.

Art√≠culo 8¬∞: El consentimiento debe ser expreso y previo, salvo excepciones legales.

Art√≠culo 15¬∞: Limitaci√≥n del uso de datos a las finalidades especificadas en el aviso de privacidad.

Art√≠culo 16:¬∞ Prohibici√≥n de transferencia de datos sin consentimiento, salvo excepciones previstas en la ley.

Los titulares de los datos pueden ejercer sus derechos ARCO (Acceso, Rectificaci√≥n, Cancelaci√≥n y Oposici√≥n) o revocar su consentimiento, conforme a los Art√≠culos 22 al 30 de la LFPDPPP.
        """)

def display_evaluacion_final():
    st.header("üìù Evaluaci√≥n Final") # Corregido para consistencia de may√∫sculas
    st.markdown("Es hora de poner a prueba tus conocimientos. Responde las siguientes preguntas para ver cu√°nto has aprendido sobre la prevenci√≥n del ciberfraude y phishing.")
    st.divider()
    st.subheader("üí° Ponte a Prueba")
    
    # Pregunta 1
    q1_respuesta = st.radio(
        "¬øCu√°l de las siguientes acciones es M√ÅS SEGURA al recibir un correo electr√≥nico inesperado de tu banco?",
        options=[
            "Hacer clic en el enlace del correo para verificar tu cuenta r√°pidamente.",
            "Llamar al n√∫mero de tel√©fono proporcionado en el correo electr√≥nico.",
            "Ignorar el correo y visitar el sitio web oficial del banco escribiendo la URL directamente en el navegador o usando un marcador guardado.",
            "Responder al correo con tu n√∫mero de cuenta para que puedan verificarlo."
        ],
        index=None, # Para que no haya ninguna opci√≥n seleccionada por defecto
        key="q1"
    )

    # Pregunta 2
    q2_respuesta = st.radio(
        "Si recibes un mensaje de texto (SMS) que dice ser de un servicio de paqueter√≠a, indicando que tienes un paquete retenido y debes pagar una peque√±a tarifa haciendo clic en un enlace, ¬øqu√© deber√≠as hacer?",
        options=[
            "Pagar la tarifa inmediatamente para recibir tu paquete.",
            "Hacer clic en el enlace para ver m√°s detalles sobre el paquete.",
            "Ignorar el mensaje y, si esperas un paquete, rastrearlo directamente en el sitio web oficial de la paqueter√≠a.",
            "Llamar al n√∫mero que envi√≥ el SMS para preguntar."
        ],
        index=None,
        key="q2"
    )

    # Pregunta 3
    q3_respuesta = st.radio(
        "¬øQu√© es la autenticaci√≥n de dos factores (2FA)?",
        options=[
            "Usar dos contrase√±as diferentes para la misma cuenta.",
            "Un m√©todo de seguridad que requiere dos formas distintas de verificaci√≥n para acceder a una cuenta (ej. contrase√±a y un c√≥digo enviado a tu tel√©fono).",
            "Un software antivirus que revisa tus archivos dos veces.",
            "Una forma de verificar tu identidad en dos sitios web diferentes."
        ],
        index=None,
        key="q3"
    )

    st.divider()

    if st.button("Verificar Respuestas"):
        correctas = 0
        total_preguntas = 3

        # Verificar Pregunta 1
        if q1_respuesta and "visitar el sitio web oficial del banco escribiendo la URL directamente" in q1_respuesta:
            st.success("Pregunta 1: ¬°Correcto! ‚úÖ Visitar el sitio oficial directamente es la acci√≥n m√°s segura.")
            correctas += 1
        elif q1_respuesta:
            st.error("Pregunta 1: Incorrecto. ‚ùå La opci√≥n m√°s segura es ir directamente al sitio oficial del banco.")
        
        # Verificar Pregunta 2
        if q2_respuesta and "Ignorar el mensaje y, si esperas un paquete, rastrearlo directamente en el sitio web oficial" in q2_respuesta:
            st.success("Pregunta 2: ¬°Correcto! ‚úÖ Siempre verifica directamente con la fuente oficial.")
            correctas += 1
        elif q2_respuesta:
            st.error("Pregunta 2: Incorrecto. ‚ùå Hacer clic en enlaces de SMS sospechosos es peligroso.")

        # Verificar Pregunta 3
        if q3_respuesta and "Un m√©todo de seguridad que requiere dos formas distintas de verificaci√≥n" in q3_respuesta:
            st.success("Pregunta 3: ¬°Correcto! ‚úÖ La 2FA a√±ade una capa crucial de seguridad.")
            correctas += 1
        elif q3_respuesta:
            st.error("Pregunta 3: Incorrecto. ‚ùå Revisa la definici√≥n de autenticaci√≥n de dos factores.")

        if not (q1_respuesta and q2_respuesta and q3_respuesta):
            st.warning("Por favor, responde todas las preguntas antes de verificar.")
        else:
            st.subheader(f"Resultado: {correctas} de {total_preguntas} respuestas correctas.")
            if correctas == total_preguntas:
                st.balloons()
                st.markdown("üéâ ¬°Felicidades! Has dominado los conceptos clave. üéâ")
            else:
                st.info("Sigue repasando los m√≥dulos para mejorar tu conocimiento. ¬°T√∫ puedes!")

def display_socio_scram():
    st.header("üöÄ +SocioScram: Tu Aliado Interactivo")
    st.markdown("Herramientas y juegos para fortalecer tu conocimiento y protegerte mejor contra el ciberfraude.")
    st.divider()

    # --- Scrambuster 60+ Session State Initializations (moved here) ---
    if "scrambuster_mensaje_guardado" not in st.session_state:
        st.session_state["scrambuster_mensaje_guardado"] = ""
    if "scrambuster_pregunta_actual" not in st.session_state:
        st.session_state.scrambuster_pregunta_actual = 0
    if "scrambuster_juego_puntaje" not in st.session_state:
        st.session_state.scrambuster_juego_puntaje = 0

    # --- Carga de datos (reutilizando la funci√≥n de M√≥dulo 5 o una similar) ---
    @st.cache_data
    def load_data_socio():
        try:
            df_denuncias_socio = pd.read_csv("denuncias_filtrado.csv")
            # Aseg√∫rate que el nombre del archivo geojson sea el correcto
            geojson_path_socio = "limite-de-las-alcaldas(1).json" 
            alcaldias_gdf_socio = gpd.read_file(geojson_path_socio)
            
            # Preprocesamiento b√°sico
            if 'NOMGEO' in alcaldias_gdf_socio.columns:
                alcaldias_gdf_socio['alcaldia'] = alcaldias_gdf_socio['NOMGEO'].str.upper()
            if 'alcaldia_hecho' in df_denuncias_socio.columns:
                 df_denuncias_socio['alcaldia_hecho'] = df_denuncias_socio['alcaldia_hecho'].astype(str).str.upper()

            return df_denuncias_socio, alcaldias_gdf_socio
        except FileNotFoundError as e:
            st.error(f"Error al cargar archivos de datos para SocioScram: {e}. Verifica las rutas.")
            return None, None

    df_denuncias, alcaldias_gdf = load_data_socio()

    # --- Secci√≥n 1: Detector de URLs Sospechosas (Educativo) ---
    st.subheader("üîç Detector de URLs Sospechosas (Educativo)")
    st.markdown("Ingresa una URL para identificar posibles se√±ales de alerta. Esta herramienta es para fines educativos y no garantiza la detecci√≥n de todas las URLs maliciosas.")

    url_input = st.text_input("URL a analizar:", key="socio_url_input")
    if st.button("Analizar URL", key="socio_url_button"):
        if url_input:
            st.markdown("--- \n**An√°lisis de la URL:**")
            warnings_url = []
            recommendations_url = [
                "**Siempre verifica el candado (HTTPS):** Aseg√∫rate de que la conexi√≥n sea segura.",
                "**Revisa el dominio principal:** ¬øEs el sitio oficial que esperas?",
                "**Cuidado con errores ortogr√°ficos:** En el nombre del dominio o en el contenido.",
                "**Desconf√≠a de URLs acortadas en contextos inesperados.**",
                "**No ingreses datos sensibles si tienes dudas:** Contacta a la entidad por un medio oficial."
            ]

            if "http://" in url_input and "https://" not in url_input:
                warnings_url.append("‚ö†Ô∏è **Conexi√≥n no segura (HTTP):** Evita ingresar informaci√≥n sensible.")
            if "https://" not in url_input:
                 warnings_url.append("‚ÑπÔ∏è **Verifica HTTPS:** Aseg√∫rate de que la URL final muestre 'https://'.")

            suspicious_tlds = [".xyz", ".tk", ".top", ".loan", ".club", ".info", ".biz"]
            for tld in suspicious_tlds:
                if url_input.endswith(tld) or tld+"/" in url_input or tld+"?" in url_input:
                    warnings_url.append(f"‚ö†Ô∏è **Dominio ({tld}) a menudo usado para spam/phishing:** Procede con cautela.")
                    break
            
            try:
                domain_part_match = re.search(r'(?:https?://)?([^/]+)', url_input)
                if domain_part_match:
                    domain_part = domain_part_match.group(1)
                    if re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', domain_part):
                        warnings_url.append("‚ö†Ô∏è **Uso de Direcci√≥n IP en lugar de Nombre de Dominio:** Puede ser una se√±al de alerta.")
                    if domain_part.count('.') > 3:
                        warnings_url.append("‚ö†Ô∏è **M√∫ltiples Subdominios:** Revisa cuidadosamente el dominio principal.")
            except Exception:
                pass # Silently ignore regex errors for malformed URLs

            if not warnings_url:
                st.success("‚úÖ No se detectaron se√±ales de alerta obvias con estas comprobaciones b√°sicas. ¬°Sigue vigilante!")
            else:
                for warning_msg in warnings_url:
                    st.warning(warning_msg)
            
            st.markdown("--- \n**Recomendaciones Generales al Navegar:**")
            for rec_msg in recommendations_url:
                st.markdown(f"- {rec_msg}")
        else:
            st.info("Por favor, ingresa una URL para analizar.")
    st.markdown("---")

    # # --- Secci√≥n 2: Juego Interactivo ---
    # st.subheader("üéÆ Juego Interactivo: ¬°Detecta el Enga√±o!")
    # phishing_scenarios_game = [
    #     {"id": "sg1", "scenario": "Email: '¬°URGENTE! Actividad sospechosa en su cuenta Netflix. Haga clic aqu√≠: netflix-support-logins.com para verificar.'", "q": "¬øEs phishing?", "ans": "S√≠", "exp": "Dominio falso y urgencia son se√±ales."},
    #     {"id": "sg2", "scenario": "SMS: 'BBVA: Compra aprobada por $5,800. Si no la reconoce, llame al 55-1234-5678.'", "q": "¬øQu√© har√≠as?", "ans": "No llamar, verificar en la app oficial del banco.", "exp": "No conf√≠es en n√∫meros de SMS; ve a fuentes oficiales."}
    # ]
    # for item in phishing_scenarios_game:
    #     st.markdown(f"**Escenario:** {item['scenario']}")
    #     user_choice = st.radio(item["q"], ["S√≠", "No", "No llamar, verificar en la app oficial del banco."], key=item["id"], index=None)
    #     if st.button("Verificar", key=f"b_{item['id']}"):
    #         if user_choice == item["ans"]:
    #             st.success(f"¬°Correcto! {item['exp']}")
    #         elif user_choice is not None:
    #             st.error(f"Incorrecto. La mejor acci√≥n es: {item['ans']}. {item['exp']}")
    #         else:
    #             st.warning("Selecciona una opci√≥n.")
    # st.markdown("---")

    # # --- Secci√≥n 3: "Modelo de Probabilidad" (An√°lisis de Frecuencias Hist√≥ricas) ---
    # st.subheader("üìä ¬øCu√°ndo y D√≥nde? Patrones de Fraude (Basado en Datos Hist√≥ricos)")
    # st.markdown("Este an√°lisis muestra tendencias basadas en datos hist√≥ricos de denuncias y no son predicciones exactas.")
    # if df_denuncias is not None:
    #     # An√°lisis por Hora
    #     if 'hora_hecho' in df_denuncias.columns:
    #         df_denuncias['hora_simple'] = pd.to_datetime(df_denuncias['hora_hecho'], format='%H:%M:%S', errors='coerce').dt.hour
    #         hourly_risk = df_denuncias['hora_simple'].value_counts().sort_index().reset_index()
    #         hourly_risk.columns = ['Hora', 'N√∫mero de Denuncias']
    #         if not hourly_risk.empty:
    #             fig_hora_socio = px.bar(hourly_risk, x='Hora', y='N√∫mero de Denuncias', title="Distribuci√≥n de Denuncias por Hora")
    #             st.plotly_chart(fig_hora_socio, use_container_width=True)

    #     # An√°lisis por Alcald√≠a
    #     if 'alcaldia_hecho' in df_denuncias.columns:
    #         alcaldia_risk = df_denuncias['alcaldia_hecho'].value_counts().reset_index()
    #         alcaldia_risk.columns = ['Alcald√≠a', 'N√∫mero de Denuncias']
    #         if not alcaldia_risk.empty:
    #             fig_alcaldia_socio = px.bar(alcaldia_risk.head(10), x='Alcald√≠a', y='N√∫mero de Denuncias', title="Top 10 Alcald√≠as por Denuncias")
    #             st.plotly_chart(fig_alcaldia_socio, use_container_width=True)
    # else:
    #     st.warning("Datos de denuncias no disponibles para el an√°lisis de patrones.")
    # st.markdown("---")

    # # --- Secci√≥n 4: Mapa Interactivo de Alcald√≠as Afectadas ---
    # st.subheader("üó∫Ô∏è Mapa de Incidencia General de Fraudes por Alcald√≠a")
    # if df_denuncias is not None and alcaldias_gdf is not None and 'alcaldia_hecho' in df_denuncias.columns and 'alcaldia' in alcaldias_gdf.columns:
    #     denuncias_agg_map = df_denuncias['alcaldia_hecho'].value_counts().reset_index()
    #     denuncias_agg_map.columns = ['alcaldia', 'total_denuncias']
        
    #     map_data_socio = alcaldias_gdf.merge(denuncias_agg_map, on='alcaldia', how='left')
    #     map_data_socio['total_denuncias'] = map_data_socio['total_denuncias'].fillna(0)

    #     m_socio = folium.Map(location=[19.4326, -99.1332], zoom_start=10, tiles='CartoDB positron')
        
    #     if not map_data_socio.empty and 'total_denuncias' in map_data_socio.columns:
    #         folium.Choropleth(
    #             geo_data=map_data_socio.to_json(), # Convert GeoDataFrame to GeoJSON string
    #             name='Choropleth',
    #             data=map_data_socio,
    #             columns=['alcaldia', 'total_denuncias'],
    #             key_on='feature.properties.alcaldia',
    #             fill_color='YlOrRd',
    #             fill_opacity=0.7,
    #             line_opacity=0.2,
    #             legend_name='Total de Denuncias Reportadas Hist√≥ricamente'
    #         ).add_to(m_socio)
    #         folium.LayerControl().add_to(m_socio)
    #         folium_static(m_socio, width=None, height=500)
    #     else:
    #         st.warning("No hay suficientes datos para generar el mapa coropl√©tico.")
    # else:
    #     st.warning("Datos no disponibles para generar el mapa interactivo de SocioScram.")

    # --- Contenido de Scrambuster 60+ integrado en SocioScram ---
    st.divider()
    st.subheader("üõ°Ô∏è Scrambuster 60+: Detector de Mensajes Sospechosos")
    st.markdown("Copia aqu√≠ el mensaje que recibiste y lo analizaremos por ti.")
    
    palabras_peligrosas = [
        "urgente", "clic aqu√≠", "premio", "cuenta bloqueada", "verifica", "regalo",
        "bonificaci√≥n", "transferencia", "datos personales", "confirmar tu identidad",
        "has sido seleccionado", "seguridad bancaria", "problemas con tu cuenta"
    ]

    mensaje_sb = st.text_area("‚úâÔ∏è Escribe o pega el mensaje aqu√≠ (Scrambuster):", value=st.session_state["scrambuster_mensaje_guardado"], height=150, key="scrambuster_text_area")

    col1_sb, col2_sb = st.columns(2)
    with col1_sb:
        analizar_sb = st.button("üîç Analizar mensaje (Scrambuster)", key="scrambuster_analizar_button")
    with col2_sb:
        limpiar_sb = st.button("üßπ Limpiar mensaje (Scrambuster)", key="scrambuster_limpiar_button")

    if analizar_sb:
        st.session_state["scrambuster_mensaje_guardado"] = mensaje_sb
        if mensaje_sb.strip() == "":
            st.warning("‚ö†Ô∏è Por favor, escribe o pega un mensaje para analizar.")
        else:
            es_malicioso_sb = any(p in mensaje_sb.lower() for p in palabras_peligrosas)
            if es_malicioso_sb:
                st.markdown("""
                <div style='padding:15px; background-color:#ffe6e6; border-radius:10px'>
                    <h4 style='color:#b30000'>üö® ¬°Alerta! Mensaje posiblemente malicioso (Scrambuster)</h4>
                    <p>No hagas clic en enlaces ni compartas datos personales.</p>
                    <ul>
                        <li>‚úÖ No respondas al mensaje.</li>
                        <li>üîí Cambia tus contrase√±as si ya diste informaci√≥n.</li>
                        <li>üìû Reporta el incidente a tu banco o instituci√≥n correspondiente.</li>
                        <li>üõ°Ô∏è Considera instalar herramientas de seguridad digital.</li>
                        <li>üìö Inf√≥rmate m√°s en este curso para prevenir fraudes futuros.</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div style='padding:15px; background-color:#e6ffe6; border-radius:10px'>
                    <h4 style='color:#267326'>‚úÖ Este mensaje parece confiable (Scrambuster)</h4>
                    <p>Aun as√≠, act√∫a con precauci√≥n.</p>
                </div>
                """, unsafe_allow_html=True)

    if limpiar_sb:
        st.session_state["scrambuster_mensaje_guardado"] = ""
        st.info("üßπ El mensaje ha sido borrado. Puedes escribir uno nuevo.")
        st.rerun() # Ensure text area updates immediately

    st.markdown("---")
    st.markdown("##### üéÆ Juego Scrambuster: ¬øEste mensaje es malicioso?")
    mensajes_juego_sb = [
        ("Has ganado un premio, haz clic aqu√≠ para reclamar.", "Malicioso"),
        ("Hola, ¬øquieres salir a caminar hoy?", "No malicioso"),
        ("Verifica tu cuenta para evitar bloqueos.", "Malicioso"),
        ("Te espero a las 5 en el parque.", "No malicioso")
    ]

    if st.session_state.scrambuster_pregunta_actual < len(mensajes_juego_sb):
        mensaje_j_sb, respuesta_correcta_sb = mensajes_juego_sb[st.session_state.scrambuster_pregunta_actual]
        st.markdown(f"**Mensaje (Juego Scrambuster):** {mensaje_j_sb}")
        col_j1_sb, col_j2_sb = st.columns(2)
        with col_j1_sb:
            if st.button("üö® Malicioso", key="scrambuster_juego_malicioso_button"):
                if respuesta_correcta_sb == "Malicioso":
                    st.success("‚úÖ Correcto")
                    st.session_state.scrambuster_juego_puntaje += 1
                else:
                    st.error("‚ùå Incorrecto")
        with col_j2_sb:
            if st.button("‚úÖ No malicioso", key="scrambuster_juego_no_malicioso_button"):
                if respuesta_correcta_sb == "No malicioso":
                    st.success("‚úÖ Correcto")
                    st.session_state.scrambuster_juego_puntaje += 1
                else:
                    st.error("‚ùå Incorrecto")
        
        if st.button("Siguiente pregunta", key="scrambuster_juego_siguiente_button"):
            st.session_state.scrambuster_pregunta_actual += 1
            st.rerun()
    else:
        st.success(f"üéâ Juego Scrambuster terminado. Puntaje: {st.session_state.scrambuster_juego_puntaje}/{len(mensajes_juego_sb)}")
        if st.button("Reiniciar juego", key="scrambuster_juego_reiniciar_button"):
            st.session_state.scrambuster_pregunta_actual = 0
            st.session_state.scrambuster_juego_puntaje = 0
            st.rerun()

    st.markdown("---")
    st.markdown("##### üìç Predicci√≥n de fraude por alcald√≠a (Scrambuster)")
    alcaldias_posibles = [
        'CUAUHTEMOC', 'LA MAGDALENA CONTRERAS', 'BENITO JUAREZ', 'IZTAPALAPA', 
        'GUSTAVO A. MADERO', 'MIGUEL HIDALGO', 'COYOACAN', 'TLAHUAC', 
        'CUAJIMALPA DE MORELOS', 'TLALPAN', 'MILPA ALTA', 'VENUSTIANO CARRANZA', 
        'AZCAPOTZALCO', 'ALVARO OBREGON', 'XOCHIMILCO', 'CDMX'
    ]
    horas_numericas = list(range(0, 24))
    hora_dict = {f"{h:02d}:00": h for h in horas_numericas}
    
    alcaldia_select_sb = st.selectbox("Selecciona una alcald√≠a (Scrambuster):", alcaldias_posibles, key="scrambuster_alcaldia_selectbox")
    hora_select_sb = st.selectbox("Selecciona una hora (Scrambuster):", list(hora_dict.keys()), key="scrambuster_hora_selectbox")
    
    np.random.seed(42)
    data_simulada_sb = pd.DataFrame({
        "alcaldia_hecho": np.random.choice(alcaldias_posibles, 5000),
        "hora": np.random.choice(horas_numericas, 5000),
        "fraude_ocurrido": np.random.binomial(1, 0.2, 5000)
    })
    filtrado_data_sb = data_simulada_sb[(data_simulada_sb["alcaldia_hecho"] == alcaldia_select_sb) & (data_simulada_sb["hora"] == hora_dict[hora_select_sb])]
    probabilidad_calculada_sb = filtrado_data_sb["fraude_ocurrido"].mean() if not filtrado_data_sb.empty else 0
    st.metric("Probabilidad estimada de fraude (Scrambuster)", f"{probabilidad_calculada_sb*100:.1f}%")
    
    def explicar_prediccion_scrambuster(filtrado_local, probabilidad_local):
        total = len(filtrado_local)
        casos_fraude = filtrado_local["fraude_ocurrido"].sum()
        return f"<div style='background-color:#f9f9f9; padding:10px; border-radius:10px; border-left:5px solid #4CAF50;'><b>¬øC√≥mo se calcula?</b><br>De un total de <b>{total}</b> reportes simulados para esa alcald√≠a y hora, <b>{casos_fraude}</b> fueron fraudes reales.<br>Esto da una estimaci√≥n de <b>{probabilidad_local*100:.1f}%</b>.</div>"
    st.markdown(explicar_prediccion_scrambuster(filtrado_data_sb, probabilidad_calculada_sb), unsafe_allow_html=True)
    
    conteo_fraude_sb = data_simulada_sb.groupby("alcaldia_hecho")["fraude_ocurrido"].mean().reset_index()
    conteo_fraude_sb.columns = ["Alcald√≠a", "Probabilidad"]
    chart_altair_sb = alt.Chart(conteo_fraude_sb).mark_bar().encode(x=alt.X("Alcald√≠a", sort="-y"), y=alt.Y("Probabilidad", title="Probabilidad de fraude"), color="Probabilidad", tooltip=["Alcald√≠a", "Probabilidad"]).properties(height=400, title="Probabilidad promedio de fraude por alcald√≠a (Scrambuster)")
    st.altair_chart(chart_altair_sb, use_container_width=True)
    
    # La secci√≥n del mapa de reportes de Scrambuster ha sido eliminada.
    st.markdown("---")
    st.markdown("> Esta aplicaci√≥n tiene fines **educativos y sin fines de lucro**. Los mensajes ingresados no se almacenan ni se comparten p√∫blicamente. Scrambuster 60+ protege tu privacidad y no expone tus datos.")
    st.caption("üîê Scrambuster 60+ | Prevenci√≥n de fraudes digitales para adultos mayores")
    # --- Fin del contenido de Scrambuster 60+ integrado ---

# --- Configuraci√≥n del Men√∫ y Mapeo a Funciones ---
PAGE_CONFIG = {
    "üè†Inicio": display_inicio,
    "üß©M√≥dulo 1: ¬øQu√© es el ciberfraude?": display_modulo1,
    "üß©M√≥dulo 2: ¬øQu√© es el phishing?": display_modulo2,
    "üß©M√≥dulo 3: ¬øPor qu√© los adultos mayores son vulnerables?": display_modulo3,
    "üß©M√≥dulo 4: Se√±ales de alerta": display_modulo4,
    "üß©M√≥dulo 5: Casos reales y estad√≠sticas": display_modulo5,
    "üß©M√≥dulo 6: Buenas pr√°cticas para protegerte": display_modulo6,
    "üß©Evaluaci√≥n final": display_evaluacion_final,
    "+SocioScram": display_socio_scram,
    "Aviso de privacidad": display_aviso_privacidad
}

# --- Barra Lateral (Sidebar) ---
st.sidebar.title("Navegaci√≥n del Curso")
# Descomenta la siguiente l√≠nea y reemplaza "path/to/your/logo.png" con la ruta a tu imagen de logo si tienes una:
# st.sidebar.image("path/to/your/logo.png", width=100) 

menu_selection = st.sidebar.radio("Elige una secci√≥n:", list(PAGE_CONFIG.keys()))

# --- Mostrar Contenido de la P√°gina Seleccionada ---
if menu_selection in PAGE_CONFIG:
    PAGE_CONFIG[menu_selection]()
else:
    st.error("P√°gina no encontrada. Por favor, selecciona una opci√≥n v√°lida del men√∫.")
